/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package counter;

import counter.items.Apple;
import counter.items.Box;
import counter.items.Cart;
import counter.items.Colour;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class App {
    static AppleComparator appleComparator = new AppleComparator();

    private static void printApples(List<Apple> appleList, Comparator<Apple> appleComparator) {
        Collections.sort(appleList, appleComparator);
        appleList.forEach(System.out::println);
    }

    public static void main(String[] argv) {

        // Some things to count
        List<Apple> someApples = Arrays.asList(
                new Apple(Colour.RED, LocalDate.of(2023, 3, 8), LocalDate.of(2024, 5, 4)),
                new Apple(Colour.RED, LocalDate.of(2023, 2, 10), LocalDate.of(2023, 6, 20)),
                new Apple(Colour.RED, LocalDate.of(2023, 1, 7), LocalDate.of(2023, 4, 18)),
                new Apple(Colour.YELLOW, LocalDate.of(2023, 3, 25), LocalDate.of(2023, 5, 11)),
                new Apple(Colour.YELLOW, LocalDate.of(2023, 2, 23), LocalDate.of(2023, 4, 16)),
                new Apple(Colour.GREEN, LocalDate.of(2023, 2, 12), LocalDate.of(2023, 3, 7)),
                new Apple(Colour.GREEN, LocalDate.of(2023, 2, 9), LocalDate.of(2023, 5, 9)),
                new Apple(Colour.GREEN, LocalDate.of(2023, 3, 1), LocalDate.of(2023, 4, 10))
        );

        Box<Apple> boxOfApples = new Box<>();
        boxOfApples.add(new Apple(Colour.RED, LocalDate.of(2023, 3, 8), LocalDate.of(2023, 5, 4)));
        boxOfApples.add(new Apple(Colour.YELLOW, LocalDate.of(2023, 2, 23), LocalDate.of(2023, 4, 16)));

        Cart<Apple> cart = new Cart<>();
        cart.add(boxOfApples);

        System.out.println("Lambda Exercise Output:");
        // Add your lambda exercises here
        //1
        Collections.sort(someApples, appleComparator);
        Collections.sort(someApples, new Comparator<Apple>() {
            @Override
            public int compare(Apple current, Apple next) {
                if (current.bestBefore().isBefore(next.bestBefore())) {
                    return 1;
                } else if (current.bestBefore().isEqual(next.bestBefore())) {
                    return 0;
                }
                return -1;
            }
        });
        Collections.sort(someApples, (current, next) -> {
            if (current.bestBefore().isBefore(next.bestBefore())) {
                return 1;
            } else if (current.bestBefore().isEqual(next.bestBefore())) {
                return 0;
            }
            return -1;
        });
        //2
        someApples.forEach(System.out::println);
        //3
        Comparator<Apple>[] comparators = new Comparator[3];

        comparators[0] = (current, next) -> {
            if (current.datePicked().isBefore(next.datePicked())) {
                return 1;
            } else if (current.datePicked().isEqual(next.datePicked())) {
                return 0;
            }
            return -1;
        };
        comparators[1] = (current, next) -> {
            if (current.bestBefore().isBefore(next.bestBefore())) {
                return 1;
            } else if (current.bestBefore().isEqual(next.bestBefore())) {
                return 0;
            }
            return -1;
        };
        comparators[2] = (current, next) -> {
            return current.colour().toString().compareTo(next.colour().toString());
        };

        printApples(someApples, comparators[2]);

        System.out.println("Streams Exercises Output:");
        // Add your stream exercises here
        //1
        someApples.forEach(System.out::println);
        //2
        someApples.stream()
            .skip(3)
            .forEach(System.out::println);
        //3
        someApples.stream()
            .findFirst()
            .ifPresent(System.out::println);
        //4
        someApples
            .stream()
            .filter(date -> date.bestBefore().isBefore(LocalDate.of(2023, 4, 15)))
            .forEach(System.out::println);
        //5
        someApples
            .stream()
            .filter(date -> date.bestBefore().isBefore(LocalDate.of(2023, 4, 15)))
            .forEach(apple -> System.out.printf("There is a %s apple that is best before %s%n", apple.colour(), apple.bestBefore()));
        //6
        someApples
            .stream()
            .filter(apple -> apple.colour().equals(Colour.RED))
            .forEach(apple -> System.out.printf("There is a %s apple that is best before %s%n", apple.colour(), apple.bestBefore()));
        //7
        someApples
            .stream()
            .skip(3)
            .sorted((current, next) -> {
                if (current.datePicked().isBefore(next.datePicked())) {
                    return 1;
                } else if (current.datePicked().isEqual(next.datePicked())) {
                    return 0;
                } else {
                    return -1;
                }
            })
            .forEach(apple -> System.out.println(apple.colour().toString()));
        //8
        someApples
            .stream()
            .filter(apple -> apple.colour().toString().contains("e"))
            .forEach(apple -> System.out.printf("There is a %s apple that is best before %s%n", apple.colour().toString(), apple.bestBefore().toString()));
        //9
        someApples
            .stream().filter(apple -> apple.datePicked().isAfter(LocalDate.of(2023, 2, 15))).count();


        System.out.println("Predicate Exercises Output:");
        Counter<Apple> appleCounter = new Counter<>();
        someApples.forEach(appleCounter::add);

        System.out.println(appleCounter.getCount()); // Should be 8

        Counter<Cart<Apple>> cartCounter = new Counter<>();
        cartCounter.add(cart);

        System.out.println(cartCounter.getCount()); // Should be 2 (number of apples in the cart in total)

        Counter<Countable> anythingCounter = new Counter<>();
        someApples.forEach(anythingCounter::add);
        anythingCounter.add(cart);

        System.out.println(anythingCounter.getCount()); // Should be 10 - sum of the above
    }
}
